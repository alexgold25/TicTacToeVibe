@using TicTacToeVibe.Core
@inject IGameService Game
@inject IComputerPlayer? Ai

<div class="controls">
    <input type="checkbox" @bind="isHumanVsAi" /> Human vs AI
    <button @onclick="NewGame">New Game</button>
    <span>@statusText</span>
</div>
<div class="board">
    @for (var i = 0; i < 9; i++)
    {
        var idx = i; // <- фикс: отдельна€ переменна€ на итерацию
                     <button class="cell"
                             disabled="@IsDisabled(idx)"
                             @onclick="(() => Click(idx))">
                         @cells[idx]
                     </button>
    }
    <svg class="win-lines">
        <line x1="0" y1="40" x2="240" y2="40" class="@LineClass(WinningLine.Row0)" />
        <line x1="0" y1="120" x2="240" y2="120" class="@LineClass(WinningLine.Row1)" />
        <line x1="0" y1="200" x2="240" y2="200" class="@LineClass(WinningLine.Row2)" />
        <line x1="40" y1="0" x2="40" y2="240" class="@LineClass(WinningLine.Col0)" />
        <line x1="120" y1="0" x2="120" y2="240" class="@LineClass(WinningLine.Col1)" />
        <line x1="200" y1="0" x2="200" y2="240" class="@LineClass(WinningLine.Col2)" />
        <line x1="0" y1="0" x2="240" y2="240" class="@LineClass(WinningLine.DiagonalMain)" />
        <line x1="0" y1="240" x2="240" y2="0" class="@LineClass(WinningLine.DiagonalAnti)" />
    </svg>
</div>


@code {
    private readonly string[] cells = new string[9];
    private string statusText = string.Empty;
    private bool isHumanVsAi = true;
    private WinningLine winningLine = WinningLine.None;

    protected override void OnInitialized()
    {
        UpdateState();
    }

    private void Click(int index)
    {
        if ((uint)index > 8) return; // быстрый guard

        if (Game.Play(ToMove(index)))
        {
            UpdateState();
            if (isHumanVsAi && Ai is not null && !Game.Board.IsGameOver)
            {
                var move = Ai.ChooseMove(Game.Board.Clone());
                if (move.HasValue) Game.Play(move.Value);
                UpdateState();
            }
        }
    }


    private void NewGame()
    {
        Game.Reset();
        UpdateState();
    }

    private bool IsDisabled(int index) => Game.Board.IsGameOver || Game.Board[index / 3, index % 3] != Player.None;

    private void UpdateState()
    {
        for (var i = 0; i < 9; i++)
        {
            cells[i] = Symbol(Game.Board[i / 3, i % 3]);
        }
        statusText = Game.Board.IsGameOver
            ? Game.Board.Winner switch
            {
                Player.X => "X wins",
                Player.O => "O wins",
                _ => "Draw"
            }
            : $"Turn: {Game.Board.CurrentPlayer}";
        winningLine = Game.Board.IsGameOver && Game.Board.Winner is Player winner
            ? FindWinningLine(Game.Board, winner)
            : WinningLine.None;
    }

    private string LineClass(WinningLine line) => winningLine == line ? "visible" : string.Empty;

    private static Move ToMove(int index) => new(index / 3, index % 3);

    private static string Symbol(Player player) => player switch
    {
        Player.X => "X",
        Player.O => "O",
        _ => string.Empty
    };

    private static WinningLine FindWinningLine(Board board, Player player)
    {
        for (var i = 0; i < 3; i++)
        {
            if (board[i, 0] == player && board[i, 1] == player && board[i, 2] == player)
            {
                return i switch
                {
                    0 => WinningLine.Row0,
                    1 => WinningLine.Row1,
                    _ => WinningLine.Row2,
                };
            }
            if (board[0, i] == player && board[1, i] == player && board[2, i] == player)
            {
                return i switch
                {
                    0 => WinningLine.Col0,
                    1 => WinningLine.Col1,
                    _ => WinningLine.Col2,
                };
            }
        }

        if (board[0, 0] == player && board[1, 1] == player && board[2, 2] == player)
        {
            return WinningLine.DiagonalMain;
        }
        if (board[0, 2] == player && board[1, 1] == player && board[2, 0] == player)
        {
            return WinningLine.DiagonalAnti;
        }

        return WinningLine.None;
    }
}
